<?php

namespace Speed\Trade\Proxies\__CG__\Speed\Trade\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class FundPool extends \Speed\Trade\Entity\FundPool implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'income', 'amount', 'fund_from', 'fund_class', 'order_id', 'status', 'credit', 'created', 'finished', 'freezed', 'remark', '' . "\0" . 'Speed\\Trade\\Entity\\FundPool' . "\0" . 'fund_users');
        }

        return array('__isInitialized__', 'id', 'income', 'amount', 'fund_from', 'fund_class', 'order_id', 'status', 'credit', 'created', 'finished', 'freezed', 'remark', '' . "\0" . 'Speed\\Trade\\Entity\\FundPool' . "\0" . 'fund_users');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (FundPool $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIncome($income)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIncome', array($income));

        return parent::setIncome($income);
    }

    /**
     * {@inheritDoc}
     */
    public function getIncome()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIncome', array());

        return parent::getIncome();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', array($amount));

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', array());

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderId($orderId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderId', array($orderId));

        return parent::setOrderId($orderId);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderId', array());

        return parent::getOrderId();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinished($finished)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinished', array($finished));

        return parent::setFinished($finished);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinished', array());

        return parent::getFinished();
    }

    /**
     * {@inheritDoc}
     */
    public function setFreezed($freezed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFreezed', array($freezed));

        return parent::setFreezed($freezed);
    }

    /**
     * {@inheritDoc}
     */
    public function getFreezed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFreezed', array());

        return parent::getFreezed();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemark($remark)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemark', array($remark));

        return parent::setRemark($remark);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemark()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemark', array());

        return parent::getRemark();
    }

    /**
     * {@inheritDoc}
     */
    public function setFundFrom($fundFrom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFundFrom', array($fundFrom));

        return parent::setFundFrom($fundFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getFundFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFundFrom', array());

        return parent::getFundFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setFundClass($fundClass)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFundClass', array($fundClass));

        return parent::setFundClass($fundClass);
    }

    /**
     * {@inheritDoc}
     */
    public function getFundClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFundClass', array());

        return parent::getFundClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsCredit($isCredit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsCredit', array($isCredit));

        return parent::setIsCredit($isCredit);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsCredit', array());

        return parent::getIsCredit();
    }

    /**
     * {@inheritDoc}
     */
    public function addFundUser(\Speed\Trade\Entity\FundUser $fundUsers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFundUser', array($fundUsers));

        return parent::addFundUser($fundUsers);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFundUser(\Speed\Trade\Entity\FundUser $fundUsers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFundUser', array($fundUsers));

        return parent::removeFundUser($fundUsers);
    }

    /**
     * {@inheritDoc}
     */
    public function getFundUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFundUsers', array());

        return parent::getFundUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setCredit($credit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredit', array($credit));

        return parent::setCredit($credit);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredit', array());

        return parent::getCredit();
    }

}
